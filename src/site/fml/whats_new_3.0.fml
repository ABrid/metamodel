<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
	title="What's new in MetaModel 3.0" toplink="false">

	<part id="features">
		<title>New features</title>
		
		<faq id="update_and_delete">
			<question>Execute UPDATE and DELETE operations</question>
			<answer>
				<p>With MetaModel 3.0 we now offer a full set of CRUD operations on your datastores! This means that in addition to querying and inserting records, you can now also update records and delete them.</p>
				<p>The UPDATE and DELETE operations can be fired on all UpdateableDataContext implementations, which currently include:</p> 
				<ul>
				<li>JDBC databases</li>
				<li>CSV files</li>
				<li>Excel spreadsheets</li>
				<li>MongoDB databases</li>
				<li>CouchDB databases</li>
				</ul>
			</answer>
		</faq>

		<faq id="create_table_and_drop_table">
			<question>Execute CREATE TABLE and DROP TABLE operations</question>
			<answer>
				<p>In MetaModel 3.0 you're also now able to create and drop tables at runtime. For instance, you can use it to create temporary, but persistent tables, or dynamically fit your data model at runtime. Doing so is done using the executeUpdate(...) method on any of the UpdateableDataContext implementations, which currently include:</p>
				<ul>
				<li>JDBC databases</li>
				<li>CSV files</li>
				<li>Excel spreadsheets</li>
				<li>MongoDB databases</li>
				<li>CouchDB databases</li>
				</ul>
				<p>The notion of a 'table' differs a bit in these datastores, so take a look at the <a href="schema_and_table_semantics.html">Schema and table semantics</a> page for a full overview.</p> 
			</answer>
		</faq>
		
		<faq id="couchdb_datastore">
			<question>CouchDB support</question>
			<answer>
				<p>We have a brand new module in MetaModel 3.0 which offers CouchDB support! Now you can query and update your CouchDB database just like you would query any regular database.</p>
			</answer>
		</faq>
		
		<faq id="pojo_datastore">
			<question>A Java object based datastore</question>
			<answer>
				<p>Another new module in MetaModel 3.0: Java object support (aka. the POJO module). While this might not seem so impressive at first, it is actually quite useful. You can use for instance for unittesting purposes or to allow users to test-drive your data flows using simple in-memory data.</p>
			</answer>
		</faq>
		
		<faq id="primary_key_awareness">
			<question>Primary key awareness</question>
			<answer>
				<p>MetaModel is now aware of primary keys. Obviously this is extremely important when dealing with UPDATE and DELETE operations. Therefore you will find two new methods: <i>Table.getPrimaryKeys()</i> and <i>Column.isPrimaryKey()</i>.</p>
			</answer>
		</faq>
	</part>
	
	<part id="api">
		<title>Changes to the existing API</title>
		
		<faq id="map_and_list_data_types">
			<question>New column types: List and Map</question>
			<answer>
				<p>With the widening of the support for NoSQL datastores like MongoDB and CouchDB, we've seen a need for new column types. We've introduced <i>LIST</i> and <i>MAP</i> for this purpose. They map to <i>java.util.List</i> and <i>java.util.Map</i> and allow for these datastore types to represent the full documents contained within them.</p>
			</answer>
		</faq>
		
		<faq id="first_row_semantics">
			<question>Semantics of "row number" changed from 0-based to 1-based.</question>
			<answer>
				<p>An important API change for MetaModel in order to improve consistency with other similar libraries: We've changed the row number concept from a <b>0-based</b> index concept to being a <b>1-based</b> row number concept! This was done in order to comply with typical usage of row numbers in eg. SQL LIMIT clauses, Spreadsheet applications, the JPA specification and more.</p>
				<p>On the down-side, this means that the semantics have changed for a number of methods or classes:</p>
				<ul>
					<li>The <i>Query.setFirstRow(Integer)</i> and <i>Query.getFirstRow()</i> methods.</li>
					<li>The <i>CsvConfiguration</i> constructor parameter '<i>columnNameLineNumber</i>'. Note that the constants NO_COLUMN_NAME_LINE and DEFAULT_COLUMN_NAME_LINE have been adjusted, so when using these constants, no change is needed.</li>
					<li>The <i>FixedWidthConfiguration</i> constructor parameter '<i>columnNameLineNumber</i>'. Note that the constants NO_COLUMN_NAME_LINE and DEFAULT_COLUMN_NAME_LINE have been adjusted, so when using these constants, no change is needed.</li>
					<li>The <i>ExcelConfiguration</i> constructor parameter '<i>columnNameLineNumber</i>'. Note that the constants NO_COLUMN_NAME_LINE and DEFAULT_COLUMN_NAME_LINE have been adjusted, so when using these constants, no change is needed.</li>
					<li>The <i>FirstRowDataSet</i> constructor parameter '<i>firstRow</i>' (rarely used).</li>
				</ul>
				<p>We encourage you to check your usage of these methods or classes before upgrading to MetaModel 3.0. Make sure you switch from a 0-based to a 1-based approach when using them.</p>
			</answer>
		</faq>
		
		<faq id="higher_than_greater_than">
			<question>Operator 'Higher/lower than' renamed to 'Greater/less than'.</question>
			<answer>
				<p>The operator types <i>HIGHER_THAN</i> and <i>LOWER_THAN</i> have been deprecated. Use the new <i>GREATER_THAN</i> and <i>LESS_THAN</i> instead.</p>
			</answer>
		</faq>
		
		<faq id="query_select_item_in_subquery">
			<question>Allowed referencing a column in a specific aliased table</question>
			<answer>
				<p>We've made it possible to construct a <i>SelectItem</i> with a reference to a specific <i>FromItem</i> which means that in case you are referencing the same table multiple times in a query, you can then pinpoint which one a specific select item references.</p>
			</answer>
		</faq>
		
		<faq id="logging_level">
			<question>Logging level moderations</question>
			<answer>
				<p>The logging level (especially for the JDBC module) has been moderated to not include as much information in the INFO level as before. This means that you will no longer get eg. the full SQL query in the INFO level, which is an improvement for the security of INFO-logged applications.</p>
			</answer>
		</faq>
		
		<faq id="totablemodel_deprecation">
			<question>Deprecation of DataSet.toTableModel()</question>
			<answer>
				<p>The method <i>DataSet.toTableModel()</i> has been deprecated, and we plan on removing it entirely from version 3.1. This is to prevent any hick-ups in environments where the <i>javax.swing</i> package is prohibited (eg. in some OSGi environments) or even not existing (eg. in future Java 8 Jigsaw-based deployments). Users of the method are encouraged to use the class <i>DataSetTableModel</i> instead, which yields the same result.</p>
			</answer>
		</faq>
	</part>

	<part id="bugfixes">
		<title>Bugfixes</title>

		<faq id="jdbc_boolean">
			<question>Fixed index-issue in handling of boolean JDBC values</question>
			<answer>
				<p>An issue with retreiving JDBC boolean values was discovered and fixed.</p>
			</answer>
		</faq>
		
	</part>

</faqs>
